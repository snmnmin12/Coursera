#include <stdio.h>
#include<iostream>
#include <queue>
using namespace std;
#define inf 1<<30
struct Point{
    int x,y;
    Point(int xx, int yy):x(xx),y(yy){}
};
char maze[200][200];
int weight[200][200];
int R,C;

void bfs(int startx,int starty)
{
    weight[startx][starty]=0;
    queue<Point> que;
    que.push(Point(startx,starty));
    while (!que.empty())
    {
        Point p1=que.front();
        que.pop();
        int x=p1.x;
        int y=p1.y;
        int dir_x[4]={-1,1,0,0};
        int dir_y[4]={0,0,-1,1};
        for (int i=0; i<=3; i++)
        {
            int newx=x+dir_x[i];
            int newy=y+dir_y[i];
        if ((newx>=0 && newx<R && newy>=0 && newy<C) && weight[newx][newy]==inf && maze[newx][newy]!='#')
        {  que.push(Point(newx,newy));
            weight[newx][newy]=weight[x][y]+1;
        }
        }
    }
             
}

int main()
{
    int T;
    scanf("%d",&T);
    while (T--)
    {
        scanf("%d%d",&R,&C);
        int start_x=0,start_y=0, end_x=0,end_y=0;
        for (int i=0; i<R; i++)
        for (int j=0; j<C; j++)
            {
                char c;
                scanf(" %c",&c);
                maze[i][j]=c;
                if (c=='S') {start_x=i; start_y=j;}
                if (c=='E') {end_x=i;end_y=j;}
                weight[i][j]=inf;
            }
        bfs(start_x,start_y);
        if (weight[end_x][end_y]!=inf)
            printf("%d\n",weight[end_x][end_y]);
        else printf("oop!\n");
    }

}