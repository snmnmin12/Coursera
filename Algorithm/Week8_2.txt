#include <stdio.h>
#include <queue>
#include <stack>
using namespace std;
const int INF=1<<30;
int maze[5][5];
int pre[5][5];
int to[4][2]={{1,0},{0,1},{-1,0},{0,-1}};
struct Point
{
    int x;
    int y;
    Point(int _x, int _y):x(_x),y(_y){}
};

void bfs(Point start)
{
    queue<Point> Q;
    Q.push(start);
    
    while (!Q.empty())
    {
        Point temp=Q.front();
        Q.pop();
        int x;
        int y;
        for (int i=0; i<4; i++)
        {
            x=temp.x+to[i][0];
            y=temp.y+to[i][1];
            if (x<0 || x>4 || y<0|| y>4 || maze[x][y]==-1)  continue;
            
            if (maze[x][y]==INF)
            {
                maze[x][y]=maze[temp.x][temp.y]+1;
                Q.push(Point(x,y));
                pre[x][y]=temp.x*5+temp.y;
            }
        }
        
    }

}

void print()
{
    stack<Point> s;
    s.push(Point(4,4));
    int u=pre[4][4];
    while (u!=-1) {
        s.push(Point(u/5,u%5));
        u=pre[u/5][u%5];
    }
    
    int x;
    int y;
    
    while (!s.empty()) {
        x=s.top().x;
        y=s.top().y;
        printf("(%d, %d)\n",x,y);
        s.pop();
    }
    

}

int main()
{
    int temp;
    for (int i=0; i<5; i++)
    for (int j=0; j<5; j++)
    {
        scanf("%d",&temp);
        if (temp==0) maze[i][j]=INF;
        else maze[i][j]=-1;
        pre[i][j]=-1;
    }
    maze[0][0]=0;
    bfs(Point(0,0));
    print();
    return 0;
}